language: minimal

dist: xenial

addons:
  apt:
    packages:
      - docker-ce
      - python3-pip
      - python3-setuptools
      - clang-format

install:
  - docker version

stages:
  - precommit
  - tests

cache:
  directories:
    - $HOME/.keras/datasets


jobs:
  include:
    - stage: test
      name: "Pre-commit and Tests"
      script:
        - set -e
        # Set up Kubernetes environment
        - bash scripts/travis/start_minikube.sh
        # Build Docker images.
        - bash $TRAVIS_BUILD_DIR/scripts/travis/build_images.sh
        # Run pre-commit checks.
        - docker run --rm -it -v $PWD:/work -w /work
          elasticdl:dev /work/scripts/pre-commit.sh
        # Create shared folder to store coverage report
        - mkdir shared
        # Run unit tests not related to ODPS
        - docker run --rm -it --net=host
          -v $HOME/.keras/datasets:/root/.keras/datasets
          -v $HOME/.kube:/root/.kube
          -v /home/$USER/.minikube/:/home/$USER/.minikube/
          -v $PWD/shared:/shared -v $PWD:/work
          -w /work elasticdl:dev
          bash -c "scripts/unittest.sh"
        # Report code coverage to https://codecov.io
        - bash <(curl -s https://codecov.io/bash)
        # Run unit tests related to ODPS (skipped for pull requests from forks)
        - |
          if [ "$ODPS_ACCESS_ID" == "" ] || [ "$ODPS_ACCESS_KEY" == "" ]; then
            echo "Skip ODPS related unit tests since either ODPS_ACCESS_ID " \
            "or ODPS_ACCESS_KEY is not set"
          else
            docker run --rm -it \
            -e MAXCOMPUTE_PROJECT=$MAXCOMPUTE_PROJECT \
            -e MAXCOMPUTE_AK=$ODPS_ACCESS_ID \
            -e MAXCOMPUTE_SK=$ODPS_ACCESS_KEY \
            -v $PWD:/work -w /work elasticdl:dev bash \
            -c "make -f elasticdl/Makefile && K8S_TESTS=False \
            pytest elasticdl/python/tests/*odps_* \
            elasticdl/python/tests/data_reader_test.py"
          fi
        # Run integration tests
        - kubectl apply -f elasticdl/manifests/elasticdl-rbac.yaml
        - |
          JOB_TYPES=(
              odps
              train
              evaluate
              predict
              local
          )
          for JOB_TYPE in "${JOB_TYPES[@]}"; do
              if [[ "$JOB_TYPE" == "odps" ]] && \
              { [[ "$ODPS_ACCESS_ID" == "" ]] || \
              [[ "$ODPS_ACCESS_KEY" == "" ]]; }; then
                echo "Skipping ODPS related integration tests since \
                either ODPS_ACCESS_ID or ODPS_ACCESS_KEY is not set"
                continue
              else
                echo "Running ElasticDL job: ${JOB_TYPE}"
                if [[ "$JOB_TYPE" == "odps" ]]; then
                    export MAXCOMPUTE_TABLE="odps_integration_build_"`
                      `"${TRAVIS_BUILD_NUMBER}_$(date +%s)"
                    docker run --rm -it \
                      -e MAXCOMPUTE_TABLE=$MAXCOMPUTE_TABLE \
                      -e MAXCOMPUTE_PROJECT=$MAXCOMPUTE_PROJECT \
                      -e MAXCOMPUTE_AK=$ODPS_ACCESS_ID \
                      -e MAXCOMPUTE_SK=$ODPS_ACCESS_KEY \
                      -v $PWD:/work -w /work elasticdl:dev bash \
                      -c 'python -c '`
                        `'"from elasticdl.python.tests.test_utils import *;'`
                        `'create_iris_odps_table_from_env()"'
                fi
                PS_NUM=2
                WORKER_NUM=1
                docker run --rm -it --net=host \
                  -e MAXCOMPUTE_TABLE=$MAXCOMPUTE_TABLE \
                  -e MAXCOMPUTE_PROJECT=$MAXCOMPUTE_PROJECT \
                  -e MAXCOMPUTE_AK=$ODPS_ACCESS_ID \
                  -e MAXCOMPUTE_SK=$ODPS_ACCESS_KEY \
                  -v /var/run/docker.sock:/var/run/docker.sock \
                  -v $HOME/.kube:/root/.kube \
                  -v /home/$USER/.minikube/:/home/$USER/.minikube/ \
                  -v $(pwd):/work \
                  -w /work elasticdl:ci \
                  bash -c "scripts/client_test.sh \
                    ${JOB_TYPE} ${PS_NUM} ${WORKER_NUM}"
                if [[ "$JOB_TYPE" != "local" ]]; then
                    python3 scripts/validate_job_status.py \
                    ${JOB_TYPE} ${PS_NUM} ${WORKER_NUM}
                fi
                if [[ "$JOB_TYPE" == "odps" ]]; then
                    docker run --rm -it \
                      -e MAXCOMPUTE_TABLE=$MAXCOMPUTE_TABLE \
                      -e MAXCOMPUTE_PROJECT=$MAXCOMPUTE_PROJECT \
                      -e MAXCOMPUTE_AK=$ODPS_ACCESS_ID \
                      -e MAXCOMPUTE_SK=$ODPS_ACCESS_KEY \
                      -v $PWD:/work \
                      -w /work \
                      elasticdl:dev \
                      bash -c 'python -c '`
                        `'"from elasticdl.python.tests.test_utils import *; '`
                        `'delete_iris_odps_table_from_env()"'
                fi
              fi
          done

# Only build on this list of branches
branches:
  only:
    - develop
    - "/branch-\\d+\\.\\d+(\\.\\d+)?(-\\S*)?$/"

env:
  global:
  # Secure tokens for ODPS-related environment variables
    - secure: "kr79IltMhuW+pmmdP0KBMY87+iePGBGiaOUYTZhxx3zW3a1t2xK5wJnxJvrOwgB\
      ipqxLvIQnYUu20Lwfo0I2bwPRVvZAExb1vFBDQgzCaXEj+DHanE0XR1nivMzUcI3iHiBNRo5\
      GalAUuiCzc/8fTxwcd0az8uxbWgPsTGkE0b8Y4epmLfsBn87rfc/lq6zWV9Q/dogBtiSZSS+\
      bWR+U1/KopoY2hQE9hDVlZwlh/5gqbtWDOKDWE+pOnHJfHzfLzjrTb1qKgcUdA0FWU4+TyXw\
      U09qYG5YvXRDHb6tpryacQC99E2rLkVZSqhIaSxjGAxbIcpvi0osv0R2FfeRd1hpgtB1Ro+N\
      kZioW7dfZfhMxJm8Q0yVCmNx3D4HyZzGX/rO4estNZbX2+Zq522wakX7YCQ7TYWjWaJJNOOu\
      YJaFp8y80sa+kE4ecF/5ZPSFiL/pUqbmnLNLNgYIq//jVgsyvJyW5luYdmD5+oTXKYi67ofz\
      GqtY6y2nAJYHzkR2iVTwJ7CqxamkQ+3tPgoorApEc/I3DdLEIWrjTbHIfzQC/RpvdJukF3hj\
      IrrcF/CnHq//rumVjPkn05yX4LzO/H5q6Bdto/+o+RGfamdAfJD09nfQAw7lQZ4yzUdzhSIL\
      TvONSNkLygyvW1NUL353TXXCa36uQvFwguJiSwzS2eDM="
    - secure: "OHi/YUNWjG2NGRNPkTSULN7d7fJG4/uFGIpsSrh6MUl7zFIK39Qh1enCPeHmOKO\
      5Fo6HxiiqzN0TbGwxnx5gkptEYwLV0DgWrT6pugwvWBehDU5koJmaEDuqJ5EGLHhJ0fm0wES\
      Hzv9hlK+Pb9vTD6by8X40LAwgU1PdcS9W5hpzXJuM2cRoRp8kiOKv7vJZXhbdYCcSU2zpizh\
      Jgh6B6zpv5gI0rdgTPL8EDYCxUQg1RrNw27+Dti3kCD59FphlRnxMzC7OoANJdFHMDBmruQI\
      dq4/0UfPrFp7ZubwM3k+DFuZkRohyPeup8L0GYTwIt+PzuEC1+1rhIy7kxinwCn0jc/DK7hS\
      Eduxxr+CbPSBV60oqi+eZSahLFZYG26xsNUR5q7B2n36pYj0eK8d54ionHqsqP39ure10T+m\
      RZS/SF9KPcpo+ZeEJaPTP41s3/5i3r5BlKfGr9GaA1yVtsbOwTx4McwJfW7Vd/HN+++swP+x\
      1pPsC6iJ8KluZ6iSx6andHGnLyzvltaPqXxR8KNmfhDKXCcX8U/OPN1v22irdyAqWrZe7geN\
      NVZJF1BRMEby1UYmAVZyZJ8xfhod/Acpv3Di+ZKSGGhbKvt20J1oYpVsV5lcNGAuCLgd175H\
      HgkpFfjGuw97rRberBgCwzQdrRJjSvgsSp7VPjzOnrAE="
    - MAXCOMPUTE_PROJECT=gomaxcompute_driver_w7u

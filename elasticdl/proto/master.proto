syntax = "proto3";

import "google/protobuf/empty.proto";

package master;

// A task is a unit of work for ElasticDL training workers, assigned by master.
// Worker divides a task into multiple minibatches and compute a gradient for
// each minibatch. For now, only RecordIO file format is supported.
message Task {
    int32 minibatch_size = 1;

    // Filename for a RecordIO shard. An empty filename signifies that the
    // master has no pending taske to assign to requesting worker.
    string shard_file_name = 2;

    // Strating and ending (inclusive) record number.
    int64 start = 3;
    int64 end = 4;

    // Current model version of master
    int32 model_version = 5;
}

message Tensor {
    // Dimensions of the tensor. The first entry in "dim" is the outermost
    // dimension used to layout the values, the last entry is the innermost
    // dimension.
    repeated int32 dim = 1;

    // ndarray's buffer dump. Each element must be a double value.
    bytes content = 2;
}

message Model {
    int32 version = 1;
    map<string, Tensor> param = 2; 
}

message GetModelRequest {
    int32 min_version = 1;
}

service Master {
    rpc GetTask(google.protobuf.Empty) returns (Task);
    rpc GetModel(GetModelRequest) returns (Model);
}

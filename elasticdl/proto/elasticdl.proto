syntax = "proto3";

package proto;

import "elasticai_api/proto/elasticai_api.proto";
import "google/protobuf/empty.proto";
import "tensorflow/core/framework/types.proto";
import "tensorflow/core/framework/tensor.proto";

option go_package = "elasticdl/go/pkg/proto";

message IndexedSlicesProto {
  tensorflow.TensorProto concat_tensors = 1;
  repeated int64 ids = 2;
}

message EmbeddingTableInfo {
  string name = 1;
  int64 dim = 2;
  string initializer = 3;
  tensorflow.DataType dtype = 4;
}

message Model {
  int32 version = 1;
  repeated EmbeddingTableInfo embedding_table_infos = 2;
  map<string, tensorflow.TensorProto> dense_parameters = 3;
  map<string, IndexedSlicesProto> embedding_tables = 4;
}

message ReportEvaluationMetricsRequest {
  map<string, tensorflow.TensorProto> model_outputs = 1;
  tensorflow.TensorProto labels = 2;
  int32 worker_id = 3;
}

message ReportVersionRequest {
  int32 model_version = 1;
}

service Master {
  rpc get_task(GetTaskRequest) returns (Task);
  rpc report_evaluation_metrics(ReportEvaluationMetricsRequest)
      returns (google.protobuf.Empty);
  rpc report_task_result(ReportTaskResultRequest)
      returns (google.protobuf.Empty);
  rpc report_version(ReportVersionRequest) returns (google.protobuf.Empty);
  rpc get_comm_rank(GetCommRankRequest) returns (GetCommRankResponse);
}

message PullEmbeddingVectorRequest {
  string name = 1;
  repeated int64 ids = 2;
}

message PullDenseParametersRequest {
  int32 version = 1;
}

message PullDenseParametersResponse {
  bool initialized = 1;
  int32 version = 2;
  map<string, tensorflow.TensorProto> dense_parameters = 3;
}

message PullEmbeddingVectorsRequest {
  string name = 1;
  repeated int64 ids = 2;
}

message PushGradientsRequest {
  Model gradients = 1;
  float learning_rate = 2;
}

message PushGradientsResponse {
  bool accepted = 1;
  int32 version = 2;
}

// PS service
service Pserver {
  rpc push_model(Model) returns (google.protobuf.Empty);
  rpc push_embedding_table_infos(Model) returns (google.protobuf.Empty);
  rpc pull_dense_parameters(PullDenseParametersRequest)
      returns (PullDenseParametersResponse);
  rpc pull_embedding_vectors(PullEmbeddingVectorsRequest)
      returns (tensorflow.TensorProto);
  rpc push_gradients(PushGradientsRequest) returns (PushGradientsResponse);
}
